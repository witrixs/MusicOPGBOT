const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const { QueryType, useMainPlayer } = require('discord-player');
const { Translate } = require('../../process_tools');

module.exports = {
    name: 'search',
    description: '–ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏', // –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    voiceChannel: true,
    options: [
        {
            name: 'song',
            description: '–ü–µ—Å–Ω—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏', // –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            type: ApplicationCommandOptionType.String,
            required: true,
        }
    ],

    async execute({ client, inter }) {
        const player = useMainPlayer();
        const song = inter.options.getString('song');

        const res = await player.search(song, {
            requestedBy: inter.member,
            searchEngine: QueryType.AUTO
        });

        if (!res?.tracks.length) return inter.editReply({ content: await Translate(`–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ <${inter.member}>... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑? <‚ùå>`) });

        const queue = player.nodes.create(inter.guild, {
            metadata: {
                channel: inter.channel
            },
            spotifyBridge: client.config.opt.spotifyBridge,
            volume: client.config.opt.defaultvolume,
            leaveOnEnd: client.config.opt.leaveOnEnd,
            leaveOnEmpty: client.config.opt.leaveOnEmpty
        });
        const maxTracks = res.tracks.slice(0, 10);

        const embed = new EmbedBuilder()
            .setColor('#2f3136')
            .setAuthor({ name: await Translate(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è <${song}>`), iconURL: client.user.displayAvatarURL({ size: 1024, dynamic: true }) })
            .setDescription(await Translate(`<${maxTracks.map((track, i) => `**${i + 1}**. ${track.title} | ${track.author}`).join('\n')}\n\n> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç <**1**> –¥–æ <**${maxTracks.length}**> –∏–ª–∏ <**–æ—Ç–º–µ–Ω–∏—Ç—å**> ‚¨áÔ∏è>`))
            .setTimestamp()
            .setFooter({ text: await Translate('–ú—É–∑—ã–∫–∞ –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ - –°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º <‚ù§Ô∏è>'), iconURL: inter.member.avatarURL({ dynamic: true }) });

        inter.editReply({ embeds: [embed] });

        const collector = inter.channel.createMessageCollector({
            time: 15000,
            max: 1,
            errors: ['time'],
            filter: m => m.author.id === inter.member.id
        });

        collector.on('collect', async (query) => {
            collector.stop();
            if (query.content.toLowerCase() === 'cancel') {
                return inter.followUp({ content: await Translate(`–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω <‚úÖ>`) , ephemeral: true });
            }

            const value = parseInt(query);
            if (!value || value <= 0 || value > maxTracks.length) {
                return inter.followUp({ content: await Translate(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç <**1**> –¥–æ <**${maxTracks.length}**> –∏–ª–∏ <**–æ—Ç–º–µ–Ω–∏—Ç—å**>... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑? <‚ùå>`), ephemeral: true });
            }

            try {
                if (!queue.connection) await queue.connect(inter.member.voice.channel);
            } catch {
                await player.deleteQueue(inter.guildId);
                return inter.followUp({ content: await Translate(`–Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É <${inter.member}>... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑? <‚ùå>`), ephemeral: true });
            }

            await inter.followUp({ content: await Translate(`–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–∞... <üéß>`), ephemeral: true });

            queue.addTrack(res.tracks[query.content - 1]);

            if (!queue.isPlaying()) await queue.node.play();
        });

        collector.on('end', async (msg, reason) => {
            if (reason === 'time') return inter.followUp({ content: await Translate(`–ü–æ–∏—Å–∫ –∏—Å—Ç–µ–∫ <${inter.member}>... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑? <‚ùå>`), ephemeral: true });
        });
    }
}
